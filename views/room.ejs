<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Online Meet</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">

    <link rel="stylesheet" href="style.css">
      <script src="/socket.io/socket.io.js"></script>
      <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <script>
        const Room_Id="<%=roomId %>"
        console.log("<%=roomId %>")//with ejs we can extract the roomId
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW" crossorigin="anonymous"></script> 
    <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>

    <script src='./js/three.js'></script>
    <script src='./js/three.js'></script>
	<!-- include jsartookit -->
	<script src="./jsartoolkit5/artoolkit.min.js"></script>
	<script src="./jsartoolkit5/artoolkit.api.js"></script>
	<!-- include threex.artoolkit -->
	<script src="./threex/threex-artoolkitsource.js"></script>
	<script src="./threex/threex-artoolkitcontext.js"></script>
	<script src="./threex/threex-arbasecontrols.js"></script>
	<script src="./threex/threex-armarkercontrols.js"></script>
</head>
<body>
    <!-- Hello world EJS -->
   
    
    <div class="main">
        <div class="main__left">
            <div class="main__videos">
                <div id='video-grid'></div>
            </div>


            <div class="main__controls">

                <div class="main__controls__block">

                    <div onclick="muteUnmute()" class="main__controls__button main__mute_button">
                        <i class="fas fa-microphone"></i>
                        <span>Mute</span>
                    </div>      

                    <div onclick="playStop()" class="main__controls__button main__video_button">
                        <i class="fas fa-video"></i>
                        <span>Stop Video</span>
                    </div>      
                </div>
                <div class="main__controls__block">

                    <div class="main__controls__button">
                        <i class="fas fa-shield-alt" onclick="arv()"></i>
                        <span>AR</span>
                    </div>      
                   
                </div>
                <div class="main__controls__block">

                         

                    <div class="main__controls__button">
                        
                        <span class="leave">Leave Meeting</span>
                    </div>      
                </div>

            </div>
        </div>
     
       
  
    <div class="main__right">
        <div class="main__header">
            <h6>Chats</h6>
        </div>
        <div class="main__chat__window">
            <ul class="messages"></ul>
        </div>
        <div class="main__message__container">
            <input id="chat__message" type="text" placeholder="Type Message here..">
        </div>
    </div>
</div>
<script>
    let vidFrom=document.getElementById("vids")
    let vidgrid=document.getElementById("innervideo")
    
    var scene, camera, renderer, clock, deltaTime, totalTime;
    
    var arToolkitSource, arToolkitContext;
    
    var markerRoot1, markerRoot2;
    
    var mesh1;
    function arv(){
     initialize();
     animate();
     vidgrid.replaceChild(vidFrom,vidgrid.childNodes[0]);
    }
    
    function initialize()
    {
        scene = new THREE.Scene();
    
        let ambientLight = new THREE.AmbientLight( 0xcccccc, 0.5 );
        scene.add( ambientLight );
                    
        camera = new THREE.Camera();
        scene.add(camera);
    
        renderer = new THREE.WebGLRenderer({
            antialias : true,
            alpha: true
        });
        renderer.setClearColor(new THREE.Color('lightgrey'), 0)
        renderer.setSize( 640, 480 );
        renderer.domElement.style.position = 'absolute'
        renderer.domElement.style.top = '0px'
        renderer.domElement.style.left = '0px'
        document.body.appendChild( renderer.domElement );
    
        clock = new THREE.Clock();
        deltaTime = 0;
        totalTime = 0;
        
        ////////////////////////////////////////////////////////////
        // setup arToolkitSource
        ////////////////////////////////////////////////////////////
    
        arToolkitSource = new THREEx.ArToolkitSource({
            sourceType : 'webcam',
        });
    
        function onResize()
        {
            arToolkitSource.onResize()	
            arToolkitSource.copySizeTo(renderer.domElement)	
            if ( arToolkitContext.arController !== null )
            {
                arToolkitSource.copySizeTo(arToolkitContext.arController.canvas)	
            }	
        }
    
        arToolkitSource.init(function onReady(){
            onResize()
        });
        
        // handle resize event
        window.addEventListener('resize', function(){
            onResize()
        });
        
        ////////////////////////////////////////////////////////////
        // setup arToolkitContext
        ////////////////////////////////////////////////////////////	
    
        // create atToolkitContext
        arToolkitContext = new THREEx.ArToolkitContext({
            cameraParametersUrl: 'data/camera_para.dat',
            detectionMode: 'mono'
        });
        
        // copy projection matrix to camera when initialization complete
        arToolkitContext.init( function onCompleted(){
            camera.projectionMatrix.copy( arToolkitContext.getProjectionMatrix() );
        });
    
        ////////////////////////////////////////////////////////////
        // setup markerRoots
        ////////////////////////////////////////////////////////////
    
        // build markerControls
        markerRoot1 = new THREE.Group();
        scene.add(markerRoot1);
        let markerControls1 = new THREEx.ArMarkerControls(arToolkitContext, markerRoot1, {
            type: 'pattern', patternUrl: "data/hiro.patt",
        })
    
        let geometry1	= new THREE.CubeGeometry(1,1,1);
        let material1	= new THREE.MeshNormalMaterial({
            transparent: true,
            opacity: 0.5,
            side: THREE.DoubleSide
        }); 
        
        mesh1 = new THREE.Mesh( geometry1, material1 );
        mesh1.position.y = 0.5;
        
        markerRoot1.add( mesh1 );
    }
    
    
    function update()
    {
        // update artoolkit on every frame
        if ( arToolkitSource.ready !== false )
            arToolkitContext.update( arToolkitSource.domElement );
    }
    
    
    function render()
    {
        renderer.render( scene, camera );
    }
    
    
    function animate()
    {
        requestAnimationFrame(animate);
        deltaTime = clock.getDelta();
        totalTime += deltaTime;
        update();
        render();
    }
    
    </script>
    <!-- we want whole js file to be loaded  so we put it last-->
    <script src="https://kit.fontawesome.com/dc4f1486b7.js" crossorigin="anonymous"></script>
    <script src="script.js"></script> 
</body>

</html>
